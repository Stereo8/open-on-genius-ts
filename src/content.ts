import * as Browser from 'webextension-polyfill'
import { BackgroundToPageMessage, PageToBackgroundMessage } from './interfaces'

let titleElement = null
let songTitle = ''
let button: HTMLImageElement = null
let loadInterval = null

async function onButtonClick() {
  button.classList.add('spinning')
  let artistName = undefined
  // if (
  //   document
  //     .querySelector('#description-inline-expander > yt-attributed-string > span > span')
  //     .innerHTML.includes('Auto-generated by YouTube.')
  // ) {
  //   artistName = document.querySelector('#text > a').innerHTML
  // }
  const message: PageToBackgroundMessage = {
    songTitle,
    ...(artistName && { artistName }),
  }

  await Browser.runtime.sendMessage(message)
}

async function mountButton() {
  console.log('mounitng button')
  const container = document.createElement('div')
  container.id = 'open-on-genius-container'

  button = document.createElement('img')
  button.src = Browser.runtime.getURL('images/genius.png')
  button.id = 'open-on-genius-button'

  const openText = document.createElement('span')
  openText.textContent = 'Open on Genius'
  openText.id = 'open-on-genius-text'

  container.appendChild(button)
  container.appendChild(openText)
  container.onclick = onButtonClick

  const menuElement = document.querySelector('#menu > ytd-menu-renderer')
  menuElement.prepend(container)
  // titleElement.parentNode.appendChild(container)
}

function messageListener(message: BackgroundToPageMessage) {
  console.log(message)
  if (message.shake) {
    const div = document.querySelector('#open-on-genius-container')
    div.classList.add('shaking')
    setTimeout(() => {
      div.classList.remove('shaking')
      button.classList.remove('spinning')
    }, 1000)
  }
  if (message.stopSpin) {
    button.classList.remove('spinning')
  }
}

// Waits for SPA to render to get song title
async function findTitle() {
  titleElement = document.querySelector('#title > h1 > yt-formatted-string')
  songTitle = titleElement?.innerHTML

  if (songTitle) {
    // clearInterval(loadInterval)
    await mountButton()

    // Looks for changes to the song title that happen on SPA navigation
    new MutationObserver(() => {
      songTitle = titleElement?.innerHTML
    }).observe(titleElement, {
      subtree: true,
      childList: true,
    })
  }
}
console.log('im on the page bro!')
// Looks for SPA navigation and attaches button if transitioning to video page
new MutationObserver(() => {
  const videoPage = window.location.href.startsWith(
    'https://www.youtube.com/watch?'
  )
  // We do not want to have more than one button
  if (videoPage && !button) {
    findTitle()
  }
}).observe(document.querySelector('title'), {
  subtree: true,
  childList: true,
  characterData: true,
})

Browser.runtime.onMessage.addListener(messageListener)
